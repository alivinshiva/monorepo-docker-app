# here we will write yml to deploy our backend service to production using github actions.
# steps
# build the docker image
# push the docker image to docker hub
# deploy the docker image to production server using ssh
name: CD Frontend

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy monorepo-be to ec2
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push to docker hub
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/dockerfile.fe
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
          push: true
          tags: alivinshiva/monorepo-fe:${{ github.sha }}

           deploy to vm /ec2 instance
      - name: Deploy to vm
        run: |
          echo "${{ secrets.SSH_PVT_KEY }}" > ~/ssh_key
          chmod 600 ~/ssh_key

          mkdir -p ~/.ssh
          echo "${{ secrets.KNOWN_HOST }}" > ~/.ssh/known_hosts

          ssh -i ~/ssh_key -o StrictHostKeyChecking=no ubuntu@3.7.73.221 << 'EOF'
            docker pull alivinshiva/monorepo-be:${{ github.sha }}
            docker stop monorepo-fe || true
            docker rm monorepo-fe || true
            docker run -d -p 3000:3000 --name monorepo-fe alivinshiva/monorepo-fe:${{ github.sha }}





# more fast and optimize d way to deploy using ssh action

name: CD Frontend

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy monorepo-fe to EC2

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/dockerfile.fe
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
          push: true
          tags: |
            alivinshiva/monorepo-fe:latest
            alivinshiva/monorepo-fe:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.SSH_PVT_KEY }}" > ~/ssh_key
          chmod 600 ~/ssh_key

          mkdir -p ~/.ssh
          echo "${{ secrets.KNOWN_HOST }}" > ~/.ssh/known_hosts

          ssh -i ~/ssh_key -o StrictHostKeyChecking=no ubuntu@3.7.73.221 << 'EOF'
            set -e
            echo "ðŸ›‘ Stopping old frontend container..."
            docker stop monorepo-fe || true
            docker rm monorepo-fe || true

            echo "ðŸ“¦ Pulling latest frontend image..."
            docker pull alivinshiva/monorepo-fe:latest

            echo "ðŸš€ Running new frontend container..."
            docker run -d \
              -p 3000:3000 \
              --name monorepo-fe \
              --restart always \
              -e DATABASE_URL='${{ secrets.DATABASE_URL }}' \
              alivinshiva/monorepo-fe:latest

            echo "âœ… Frontend deployed successfully!"
            docker ps | grep monorepo-fe
          EOF
